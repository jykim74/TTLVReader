cmake_minimum_required(VERSION 3.5)

project(TTLVReader
    VERSION 0.9.2
    DESCRIPTION "TTLVReader Application"
    LANGUAGES CXX )

set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Set up AUTOMOC and some sensible defaults for runtime execution
# When using Qt 6.3, you can replace the code block below with
# qt_standard_project_setup()
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

find_package(QT NAMES Qt5 Qt6 REQUIRED COMPONENTS Core)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Gui)
find_package(Qt${QT_VERSION_MAJOR} OPTIONAL_COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} OPTIONAL_COMPONENTS PrintSupport Widgets)

if(APPLE)
    SET(platform_specific_sources ${platform_specific_sources} mac_sparkle_support.mm)
    SET(platform_specific_headers ${platform_specific_headers} mac_sparkle_support.h)
    SET_SOURCE_FILES_PROPERTIES(mac_sparkle_support.mm PROPERTIES COMPILE_FLAGS -fobjc-arc)
    SET(SPARKLE_FRAMEWORK /usr/local/Sparkle.framework)
    INCLUDE_DIRECTORIES(${SPARKLE_FRAMEWORK}/Headers)
endif()

set(PROJECT_SRC
    about_dlg.cpp
    auto_update_service.cpp
    common.cpp
    edit_dlg.cpp
    i18n_helper.cpp
    insert_data_dlg.cpp
    main.cpp
    mainwindow.cpp
    reader_applet.cpp
    reader_tree_item.cpp
    reader_tree_model.cpp
    reader_tree_view.cpp
    req_encoder_dlg.cpp
    send_msg_dlg.cpp
    settings_dlg.cpp
    settings_mgr.cpp
    ${platform_specific_sources}
)

set( PROJECT_HEADER
    about_dlg.h
    auto_update_service.h
    common.h
    edit_dlg.h
    i18n_helper.h
    insert_data_dlg.h
    mainwindow.h
    reader_applet.h
    reader_tree_item.h
    reader_tree_model.h
    reader_tree_view.h
    req_encoder_dlg.h
    send_msg_dlg.h
    settings_dlg.h
    settings_mgr.h
    singleton.h
    ${platform_specific_headers}
)

set( PROJECT_FORM
    about_dlg.ui
    edit_dlg.ui
    insert_data_dlg.ui
    mainwindow.ui
    req_encoder_dlg.ui
    send_msg_dlg.ui
    settings_dlg.ui
)


set(PROJECT_SOURCES
    ${PROJECT_SRC} ${PROJECT_HEADER} ${PROJECT_FORM}
)

set(RESOURCE ${CMAKE_SOURCE_DIR}/ttlvreader.qrc)
qt5_add_resources(RESOURCE_ADDED ${RESOURCE})

add_executable(${PROJECT_NAME}
    ${PROJECT_SOURCES}
    ${RESOURCE_ADDED}
    ttlv.rc
    ttlvreader.icns
)

target_link_options( ${PROJECT_NAME} PRIVATE -mwindows -MD )

# target_compile_definitions( ${PROJECT_NAME} PRIVATE JS_PRO )

if(WIN32)
    include_directories( ../../PKILib
        "c:/msys64/mingw64/include"
        ../../PKILib/lib/win64/winsparkle/include )


   if( CMAKE_BUILD_TYPE STREQUAL "Debug" )
        target_link_directories( ${PROJECT_NAME} PRIVATE
        ../../build-PKILib-Desktop_Qt_5_13_2_MinGW_64_bit-Debug
        ../../PKILib/lib/win64/debug/openssl3/lib64
        ../../PKILib/lib/win64/winsparkle/x64/Release
        "C:/msys64/mingw64/lib" )
    elseif( CMAKE_BUILD_TYPE STREQUAL "Release" )
        target_link_directories( ${PROJECT_NAME} PRIVATE
        ../../build-PKILib-Desktop_Qt_5_13_2_MinGW_64_bit-Release
        ../../PKILib/lib/win64/openssl3/lib64
        ../../PKILib/lib/win64/winsparkle/x64/Release
        "C:/msys64/mingw64/lib" )
    endif()

    target_link_libraries(${PROJECT_NAME} PRIVATE
        Qt${QT_VERSION_MAJOR}::Widgets
	Qt${QT_VERSION_MAJOR}::PrintSupport
        Qt${QT_VERSION_MAJOR}::Gui
        PKILib crypto ssl ltdl ldap lber gmp ws2_32 WinSparkle )

    target_compile_definitions( ${PROJECT_NAME} PRIVATE _AUTO_UPDATE )

elseif(APPLE)
    set(CMAKE_MACOSX_BUNDLE ON)
    set(CMAKE_MACOSX_RPATH ON)

    # The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
    # generated by CMake. This variable contains the .icns file name,
    # without the path.

    # And the following tells CMake where to find and install the file itself.

    set_source_files_properties(ttlvreader.icns PROPERTIES MACOSX_PACKAGE_LOCATION Resources)

    set_target_properties( ${PROJECT_NAME} PROPERTIES
        MACOSX_BUNDLE true
        MACOSX_BUNDLE_ICON_FILE bereditor.icns
        MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/Info.plist )

    include_directories( ../../PKILib
        ../../lib/mac/openssl3/include
        /usr/local/include )

    if( CMAKE_BUILD_TYPE STREQUAL "Debug" )
        target_link_directories( ${PROJECT_NAME} PRIVATE
        ../../build-PKILib-Desktop_Qt_5_15_2_clang_64bit-Debug
        ../../lib/mac/debug/openssl3/lib
        /usr/local/lib )
    elseif( CMAKE_BUILD_TYPE STREQUAL "Release" )
        target_link_directories( ${PROJECT_NAME} PRIVATE
        ../../build-PKILib-Desktop_Qt_5_15_2_clang_64bit-Release
        ../../lib/mac/openssl3/lib
        /usr/local/lib )
    endif()

    target_link_libraries(${PROJECT_NAME} PRIVATE
        Qt${QT_VERSION_MAJOR}::Gui
        Qt${QT_VERSION_MAJOR}::Widgets
	Qt${QT_VERSION_MAJOR}::PrintSupport
        PKILib crypto ssl ltdl ldap lber gmp
        "-framework AppKit"
        "-framework Carbon"
        "-framework Foundation"
        "-framework ApplicationServices"
        "-framework Sparkle" )

    target_compile_definitions( ${PROJECT_NAME} PRIVATE _AUTO_UPDATE )

elseif(LINUX)
    include_directories( ../../PKILib
        "/usr/local/include"
        ../../PKILib/lib/win64/winsparkle/include )

    if(Debug)
        target_link_directories( ${PROJECT_NAME} PRIVATE
        ../../build-PKILib-Desktop_Qt_5_13_2_MinGW_64_bit-Debug
        ../../PKILib/lib/win64/debug/openssl3/lib64
        ../../PKILib/lib/win64/winsparkle/x64/Release
        "/usr/local/lib" )
    endif()

    if(NOT Debug)
        target_link_directories( ${PROJECT_NAME} PRIVATE
        ../../build-PKILib-Desktop_Qt_5_13_2_MinGW_64_bit-Release
        ../../PKILib/lib/win64/openssl3/lib64
        ../../PKILib/lib/win64/winsparkle/x64/Release
        "/usr/local/lib" )
    endif()

    target_link_libraries(${PROJECT_NAME} PRIVATE
        Qt${QT_VERSION_MAJOR}::Gui
        Qt${QT_VERSION_MAJOR}::Widgets
	Qt${QT_VERSION_MAJOR}::PrintSupport
        PKILib crypto ssl ltdl ldap lber gmp )
endif()

target_compile_definitions( ${PROJECT_NAME} PRIVATE
    TTLV_READER_VERSION=${PROJECT_VERSION}
    QT_DEPRECATED_WARNINGS
)


find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Widgets LinguistTools REQUIRED)
set(TS_FILES ttlvreader_ko_KR.ts)
#qt_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
qt5_add_translation( ${PROJECT_NAME} TS_FILES ttlvreader_ko_KR.ts )

if(WIN32)
    install( TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin )
elseif(APPLE)
    install( TARGETS ${PROJECT_NAME} BUNDLE DESTINATION . RUNTIME DESTINATION . )
elseif(LINUX)
    install( TARGETS ${PROJECT_NAME} RUNTIME_DESTINATION bin )
endif()
